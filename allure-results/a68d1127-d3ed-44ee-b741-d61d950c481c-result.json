{"name": "test_create_users[Valid-Create Different user]", "status": "failed", "statusDetails": {"message": "AssertionError: 'name' must not be empty", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000018F140BD5B0>, data = {'action': 'create', 'expected': True, 'job': '', 'name': '', ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\response_validators.py:43: in validate_response\n    assert_common_fields(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'createdAt': '2025-07-23T16:34:03.494Z', 'id': '982', 'job': '', 'name': ''}\n\n    def assert_common_fields(data):\n        \"\"\"\n        Validates known fields if they exist.\n        Does NOT require all fields to be present.\n        Adjust field names and validations based on expected API structure.\n        \"\"\"\n    \n        if \"id\" in data:\n            assert isinstance(data[\"id\"], (int, str)), \"'id' must be int or str\"\n    \n        if \"name\" in data:\n            assert isinstance(data[\"name\"], str), \"'name' must be a string\"\n>           assert data[\"name\"].strip(), \"'name' must not be empty\"\nE           AssertionError: 'name' must not be empty\n\nutils\\response_validators.py:13: AssertionError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "987102ca-9ebf-4f68-a641-3c9691fd8df6-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "334309ce-f305-43b4-aa94-2972bf6b9a27-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "7ddec9b4-092f-49ee-b12e-7018659e915c-attachment.txt", "type": "text/plain"}, {"name": "[POST] request", "source": "649f9e46-a999-4a6a-ba45-74fb82dfe19b-attachment.txt", "type": "text/plain"}, {"name": "response [201]", "source": "8b6b0d5e-b3f9-4cbe-ac13-7e1ab7d0a69c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'id': '', 'name': '', 'job': '', 'expected': True, 'note': 'Valid-Create Different user'}"}], "start": 1753288443267, "stop": 1753288443557, "uuid": "d8954791-ec7c-4f86-802e-c7f9d79ef2c8", "historyId": "cbbfaefd8c86a032be2e63d4ce7c50f1", "testCaseId": "773c4b92666421217840b4ff76e73058", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "17532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}