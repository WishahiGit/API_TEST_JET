{"name": "test_update_users[NoValid- Book not found]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 200", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000002702EA28050>, data = {'action': 'update_by_id', 'expected': False, 'job': '', 'name': 'Nobody', ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        try:\n            id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n        except Exception:\n            pytest.fail(f\"[ERROR] Invalid id from Excel: '{data.get('id')}'\")\n    \n        payload = build_users_payload(data)\n        res = self.users_api.update_users(id, payload=payload)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [200]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n    \n            if res.status_code == 204:\n                # No Content ‚Äì skip validation\n                return\n    \n            data = parse_json_response(res)\n            assert_common_fields(data)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 200\n\nutils\\response_validators.py:44: AssertionError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "f0221b21-162b-4870-a45b-88a507ab0ed7-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "9585b551-6651-45ce-80db-2921469160ee-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "c3822bf8-cc84-4041-90b2-73522ed61406-attachment.txt", "type": "text/plain"}, {"name": "[PUT] request", "source": "c53eee26-55ac-4fdb-901f-1a5613b7aa0f-attachment.txt", "type": "text/plain"}, {"name": "response [200]", "source": "a7d26bd8-d4dd-40f6-848b-026e3b811645-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 0.0, 'name': 'Nobody', 'job': '', 'expected': False, 'note': 'NoValid- Book not found'}"}], "start": 1753287563096, "stop": 1753287563409, "uuid": "23dcb36a-2ff1-40be-b0e7-d1cd58b52bc3", "historyId": "3fa25077474b9b27ae8c4b68430a7af2", "testCaseId": "606f5d6c173cdf14acb8881bab7fb526", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "10852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}