{"name": "test_get_by_id[Valid-create]", "status": "failed", "statusDetails": {"message": "AssertionError: 'firstname' must not be empty", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000021C47EB1D00>, data = {'action': 'get_by_id', 'additionalneeds': '', 'id': 1.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Fetches a users by ID and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"get_by_id\", parametrize=True))\n    def test_get_by_id(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n        res = self.users_api.get_users_by_id(id)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\response_validators.py:45: in validate_response\n    assert_common_fields(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'additionalneeds': 'Breakfast', 'usersdates': {'checkin': '2018-01-01', 'checkout': '2015-01-01'}, 'depositpaid': False, 'firstname': '', ...}\n\n    def assert_common_fields(data):\n        \"\"\"\n        Validates fields for users response.\n        Does NOT require all fields to be present.\n        \"\"\"\n    \n        if \"firstname\" in data:\n            assert isinstance(data[\"firstname\"], str), \"'firstname' must be a string\"\n>           assert data[\"firstname\"].strip(), \"'firstname' must not be empty\"\nE           AssertionError: 'firstname' must not be empty\n\nutils\\response_validators.py:9: AssertionError"}, "description": "Fetches a users by ID and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "60150ac9-f558-462c-b44e-5e805b3677d0-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "2192c94a-4bd0-48f6-8d5e-125872db3d51-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "86e5e09a-cc43-421a-925b-e7c0c3f9a2d6-attachment.txt", "type": "text/plain"}, {"name": "[GET] request", "source": "6cca3bec-6743-4d7e-a3f3-c76142829f0e-attachment.txt", "type": "text/plain"}, {"name": "response [200]", "source": "50bbbc6b-c66b-412b-9553-59473487a692-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'get_by_id', 'id': 1.0, 'username': '', 'password': '', 'firstnam': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': True, 'note': 'Valid-create'}"}], "start": 1753305325283, "stop": 1753305325883, "uuid": "1ee86541-5ec8-4a65-9ea9-452fc4d92bb4", "historyId": "6cb4e6082eb5ff5a1e8d5ab39b2acaa9", "testCaseId": "b36400a3d5d493736831dbaf54a70e20", "fullName": "tests.test_api_resource.TestusersAPI#test_get_by_id", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "11172-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}