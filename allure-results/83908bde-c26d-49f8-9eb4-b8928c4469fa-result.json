{"name": "test_update_users[NoValid- Book not found]", "status": "broken", "statusDetails": {"message": "TypeError: float() argument must be a string or a real number, not 'NoneType'", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000001CE47F1C050>, data = {'action': 'update_by_id', 'additionalneeds': '', 'id': 999999.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n>       id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n\ntests\\test_api_resource.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'action': 'update_by_id', 'additionalneeds': '', 'id': 999999.0, 'checkin': NaT, ...}, fallback_id = 4029\n\n    def extract_id(data, fallback_id):\n        \"\"\"\n        Extracts id from input data.\n        If missing or invalid, uses fallback_id.\n        \"\"\"\n        raw = data.get(\"id\")\n>       return int(float(raw)) if str(raw).strip() else fallback_id\nE       TypeError: float() argument must be a string or a real number, not 'NoneType'\n\nutils\\input.py:19: TypeError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "1648c417-3133-4c60-b7a6-c8815de727a8-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "82b827be-8d05-4ba5-b2d8-fc31b33c682a-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "58e3ab34-cd9d-4ef7-ab05-c7d314bff5a4-attachment.txt", "type": "text/plain"}, {"name": "[None] request", "source": "8952714a-eb93-43f7-96de-086684737d67-attachment.txt", "type": "text/plain"}, {"name": "Allure Attachment Error", "source": "a70647df-325f-43cb-9847-ea63d4567771-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 999999.0, 'username': '', 'password': '', 'firstnam': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': False, 'note': 'NoValid- Book not found'}"}], "start": 1753303716008, "stop": 1753303716009, "uuid": "04498e79-dd15-40f2-8454-ddf14c291fb2", "historyId": "bf4c9e5fe08e2b41c6e83fc951a19902", "testCaseId": "b5cf996acdbf337d70d6630e3e1a8d62", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "13484-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}