{"name": "test_update_users[NoValid- Book not found]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404/405, got 403", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000022DD65CE7B0>, data = {'action': 'update_by_id', 'additionalneeds': '', 'id': 999999.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n        payload = build_users_payload(data)\n    \n        print(\"\\n[UPDATE] users ID:\", id)\n        print(\"[UPDATE] Payload:\", payload)\n    \n        res = self.users_api.update_users(id, payload=payload)\n    \n        print(\"[UPDATE] Response Code:\", res.status_code)\n        print(\"[UPDATE] Response Body:\", res.text)\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [403]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n            if res.status_code == 204:\n                return\n            if 'application/json' in res.headers.get('Content-Type', ''):\n                try:\n                    data = res.json()\n                    assert_common_fields(data)\n                except Exception as e:\n                    raise AssertionError(f\"Response is not valid JSON: {e}\")\n            else:\n                print(f\"Non-JSON response body: {res.text}\")\n        else:\n>           assert res.status_code in [400, 404, 405], f\"Expected 400/404/405, got {res.status_code}\"\nE           AssertionError: Expected 400/404/405, got 403\n\nutils\\response_validators.py:50: AssertionError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "e83e539d-9055-48a4-9334-6b2dd1874b6c-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "8404d0ac-0cd0-4301-95e6-e72c33c82808-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "f1a94769-f8e8-4705-87cb-31d29accb9ea-attachment.txt", "type": "text/plain"}, {"name": "[PUT] request", "source": "07b6376c-cdaf-4756-8498-ef0bbd6cc601-attachment.txt", "type": "text/plain"}, {"name": "response [403]", "source": "9eeb4759-20f8-416a-9ef7-7e40468caeca-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 999999.0, 'username': '', 'password': '', 'firstname': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': False, 'note': 'NoValid- Book not found'}"}], "start": 1753308647662, "stop": 1753308648238, "uuid": "1aeea589-ebdc-4c42-b5cd-4cea88ff9e2b", "historyId": "f0b01e43e31555aab78548d89af5e0bb", "testCaseId": "b5cf996acdbf337d70d6630e3e1a8d62", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "10308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}