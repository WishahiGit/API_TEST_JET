{"name": "test_delete_users[NoValid-Delete Invalid ID]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 201", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000001E523914A50>, data = {'action': 'delete_by_id', 'additionalneeds': '', 'id': 0.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Deletes a users by ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"delete_by_id\", parametrize=True))\n    def test_delete_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        raw_id = data.get(\"id\")\n        id = int(raw_id) if raw_id else self.__class__.created_ids.pop(0)\n        res = self.users_api.delete_users(id)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [201]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n            if res.status_code == 204:\n                return\n            try:\n                data = res.json()\n            except Exception as e:\n                raise AssertionError(f\"Response is not valid JSON: {e}\")\n            assert_common_fields(data)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 201\n\nutils\\response_validators.py:47: AssertionError"}, "description": "Deletes a users by ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "986aaffe-babd-4458-972c-bbf2072d2578-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "e91a1d87-384e-4a1f-8dd5-16c3a5c86d43-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "d13b0134-c323-4db5-a175-abcddeb6725c-attachment.txt", "type": "text/plain"}, {"name": "[DELETE] request", "source": "4c162688-4f7b-4e8c-a997-f05f11a86188-attachment.txt", "type": "text/plain"}, {"name": "response [201]", "source": "03b85694-2238-433c-94c0-8e181d36e48e-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'delete_by_id', 'id': 0.0, 'username': '', 'password': '', 'firstnam': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': False, 'note': 'NoValid-Delete Invalid ID'}"}], "start": 1753304009932, "stop": 1753304010544, "uuid": "b3ce0c84-34aa-494d-9be2-49ff0228cc64", "historyId": "a3918a213a93276c1dbdbb91e1a125f6", "testCaseId": "c63c59542b9fcf261cf624e91c5040a5", "fullName": "tests.test_api_resource.TestusersAPI#test_delete_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "2800-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}