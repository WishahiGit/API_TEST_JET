{"name": "test_create_users[Valid-Create Different user]", "status": "broken", "statusDetails": {"message": "TypeError: assert_common_fields() missing 1 required positional argument: 'expected'", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000021126785220>, data = {'action': 'create', 'expected': True, 'job': '', 'name': '', ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [201]>, expected = True\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n    \n            if res.status_code == 204:\n                # No Content ‚Äì skip validation\n                return\n    \n            data = parse_json_response(res)\n>           assert_common_fields(data)\nE           TypeError: assert_common_fields() missing 1 required positional argument: 'expected'\n\nutils\\response_validators.py:57: TypeError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "7a73e6a1-1baa-4b0b-ab24-d694f33d1d4a-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "75c3c3fb-40c0-4f8a-85cf-b13b92196124-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "9264e867-c441-40b4-81ec-8803298a7759-attachment.txt", "type": "text/plain"}, {"name": "[POST] request", "source": "f873a21b-d702-440b-be37-80897feccdff-attachment.txt", "type": "text/plain"}, {"name": "response [201]", "source": "c5ee2c65-1256-433d-b745-bb6bb0848ae2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'id': '', 'name': '', 'job': '', 'expected': True, 'note': 'Valid-Create Different user'}"}], "start": 1753287877380, "stop": 1753287877675, "uuid": "94982ae9-ceeb-4211-9694-9caf3876e9a4", "historyId": "cbbfaefd8c86a032be2e63d4ce7c50f1", "testCaseId": "773c4b92666421217840b4ff76e73058", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "16924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}