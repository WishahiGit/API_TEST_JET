{"name": "test_update_users[Valid-Update Full Data]", "status": "failed", "statusDetails": {"message": "AssertionError: 'firstname' must not be empty", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000021C47D93BB0>, data = {'action': 'update_by_id', 'additionalneeds': 'Breakfast', 'id': 1.0, 'checkin': Timestamp('2018-01-01 00:00:00'), ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n        payload = build_users_payload(data)\n        res = self.users_api.update_users(id, payload=payload)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\response_validators.py:45: in validate_response\n    assert_common_fields(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'additionalneeds': 'Breakfast', 'usersdates': {'checkin': '2018-01-01', 'checkout': '2015-01-01'}, 'depositpaid': False, 'firstname': '', ...}\n\n    def assert_common_fields(data):\n        \"\"\"\n        Validates fields for users response.\n        Does NOT require all fields to be present.\n        \"\"\"\n    \n        if \"firstname\" in data:\n            assert isinstance(data[\"firstname\"], str), \"'firstname' must be a string\"\n>           assert data[\"firstname\"].strip(), \"'firstname' must not be empty\"\nE           AssertionError: 'firstname' must not be empty\n\nutils\\response_validators.py:9: AssertionError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "c7a811f9-1371-40a1-abb1-fc91bc819977-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "b64bf1ae-c156-4ba8-ac61-6df3c9e9e6f2-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "345df952-36f7-4b45-9b7d-2a661c1332bb-attachment.txt", "type": "text/plain"}, {"name": "[PUT] request", "source": "719eb3d4-2ba7-4095-82cb-6fbabea82587-attachment.txt", "type": "text/plain"}, {"name": "response [200]", "source": "40c0096e-79dd-462c-a7b8-77c901562b74-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 1.0, 'username': '', 'password': '', 'firstnam': 'dfdfbdfb', 'lastname': 'dffvfv', 'totalprice': 587.0, 'depositpaid': 1.0, 'checkin': Timestamp('2018-01-01 00:00:00'), 'checkout': Timestamp('2015-01-01 00:00:00'), 'additionalneeds': 'Breakfast', 'expected': True, 'note': 'Valid-Update Full Data'}"}], "start": 1753305323324, "stop": 1753305323933, "uuid": "479dbd45-c8d0-4f13-b776-9717002656b3", "historyId": "cd8c173ea838eba9ad91173cdfcdbf7e", "testCaseId": "b5cf996acdbf337d70d6630e3e1a8d62", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "11172-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}