{"name": "test_create_users[Valid-Create Different user]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 200/201, got 400", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000001EE03AFC3E0>, data = {'action': 'create', 'author': 'Jane Smith', 'book_id': '', 'expected': True, ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [400]>, expected = True, required_fields = None\n\n    def validate_response(res, expected, required_fields=None):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        You can supply required_fields for field validation.\n        \"\"\"\n        if expected:\n>           assert res.status_code in [200, 201], f\"Expected 200/201, got {res.status_code}\"\nE           AssertionError: Expected 200/201, got 400\n\nutils\\response_validators.py:29: AssertionError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "620be149-4940-4ccd-a0dc-c2ca4e430846-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "77f2fc55-dd2b-44bd-9ae7-dbdc1b123627-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "b77f33cd-4a59-4466-874f-08ca0349f8e3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'book_id': '', 'author': 'Jane Smith', 'is_borrowed': 1.0, 'title': 'Book B', 'user': 'bob', 'expected': True, 'note': 'Valid-Create Different user'}"}], "start": 1753271798951, "stop": 1753271801012, "uuid": "5f97618a-89f5-4711-91bb-a6dc9251cfd6", "historyId": "2afcb952cf9c427117fba34952225f76", "testCaseId": "522a9ce680cb34bf285a90d30d94c08b", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "20168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}