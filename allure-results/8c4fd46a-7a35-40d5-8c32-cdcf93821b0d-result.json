{"name": "test_create_users[Valid-create]", "status": "broken", "statusDetails": {"message": "TypeError: assert_common_fields() missing 1 required positional argument: 'expected'", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x00000211266F5E50>, data = {'action': 'create', 'expected': True, 'job': 'engineer', 'name': 'John Doe', ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [201]>, expected = True\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n    \n            if res.status_code == 204:\n                # No Content ‚Äì skip validation\n                return\n    \n            data = parse_json_response(res)\n>           assert_common_fields(data)\nE           TypeError: assert_common_fields() missing 1 required positional argument: 'expected'\n\nutils\\response_validators.py:57: TypeError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "02bd5030-034b-48cf-9039-ab59220f2c1c-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "c868292e-f9b8-4228-8860-bfaec230056f-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "7b909410-8793-4277-a7a7-19d874eb5e88-attachment.txt", "type": "text/plain"}, {"name": "[POST] request", "source": "59a5e125-e158-42d2-a627-c64e28914bc7-attachment.txt", "type": "text/plain"}, {"name": "response [201]", "source": "41bf74e2-d4b7-403a-aac5-b51d13bee32b-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'id': '', 'name': 'John Doe', 'job': 'engineer', 'expected': True, 'note': 'Valid-create'}"}], "start": 1753287876941, "stop": 1753287877271, "uuid": "ebddf561-a84e-47ec-9e5e-8fd20b2070ea", "historyId": "95a06d3a735ec02f6e3c62137bcf4b9f", "testCaseId": "773c4b92666421217840b4ff76e73058", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "16924-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}