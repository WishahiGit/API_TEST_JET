{"name": "test_update_users[NO-Valid-Partial Update]", "status": "failed", "statusDetails": {"message": "AssertionError: 'job' must be a non-empty string", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x00000274FFC59AE0>, data = {'action': 'update_by_id', 'expected': True, 'job': '', 'name': 'Only Author', ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        try:\n            id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n        except Exception:\n            pytest.fail(f\"[ERROR] Invalid id from Excel: '{data.get('id')}'\")\n    \n        payload = build_users_payload(data)\n        res = self.users_api.update_users(id, payload=payload)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\response_validators.py:31: in validate_response\n    assert_common_fields(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'job': '', 'name': 'Only Author', 'updatedAt': '2025-07-23T16:00:05.874Z'}\n\n    def assert_common_fields(data):\n        \"\"\"\n        Validates common expected field types and non-empty constraints dynamically.\n        Extend this mapping as needed for different APIs.\n        \"\"\"\n    \n        field_validations = {\n            \"id\": (lambda v: isinstance(v, (int, str)), \"'id' must be int or str\"),\n            \"name\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'name' must be a non-empty string\"),\n            \"job\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'job' must be a non-empty string\"),\n            \"email\": (lambda v: isinstance(v, str) and \"@\" in v, \"'email' must be a valid email string\"),\n            \"first_name\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'first_name' must be a non-empty string\"),\n            \"last_name\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'last_name' must be a non-empty string\"),\n        }\n    \n        for field, (validator, error_msg) in field_validations.items():\n            if field in data:\n>               assert validator(data[field]), error_msg\nE               AssertionError: 'job' must be a non-empty string\n\nutils\\response_validators.py:18: AssertionError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "cc79c066-333f-425b-8b06-c7639a01bf9e-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "50cccae7-aed9-47f2-b009-eb5db42d61f9-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "082dbeb6-943c-433c-8df0-4e65317b5943-attachment.txt", "type": "text/plain"}, {"name": "[PUT] request", "source": "60241f5f-2726-4203-877c-a2ce8641e898-attachment.txt", "type": "text/plain"}, {"name": "response [200]", "source": "36dd815d-051e-42cb-8053-9c2d5a08fae2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 999999999.0, 'name': 'Only Author', 'job': '', 'expected': True, 'note': 'NO-Valid-Partial Update'}"}], "start": 1753286404191, "stop": 1753286404494, "uuid": "c0e6ed7b-56cc-4783-a652-2f9e2286b8de", "historyId": "442892ba62cdedb55a1a955a0064286c", "testCaseId": "606f5d6c173cdf14acb8881bab7fb526", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "4864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}