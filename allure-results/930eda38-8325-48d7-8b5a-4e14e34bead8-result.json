{"name": "test_create_users[]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 200", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000001E7C538B890>, data = {'action': 'create_users', 'additionalneeds': 'Breakfast', 'id': '', 'checkin': Timestamp('2018-01-01 00:00:00'), ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create_users\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [200]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n            if res.status_code == 204:\n                return\n            try:\n                data = res.json()\n            except Exception as e:\n                raise AssertionError(f\"Response is not valid JSON: {e}\")\n            assert_common_fields(data)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 200\n\nutils\\response_validators.py:47: AssertionError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "f777ba76-634b-4fa7-b426-c90688ddab95-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "e9170293-38f9-48f7-9668-1b25a06f59d9-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "64470351-2f33-4cd5-ab4a-4c352163d3ef-attachment.txt", "type": "text/plain"}, {"name": "[POST] request", "source": "fd01762b-a2c9-4e62-8edf-d5ee3173c1ac-attachment.txt", "type": "text/plain"}, {"name": "response [200]", "source": "bb897cdf-f1e2-41d9-a6d9-5ff1c042e3e8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create_users', 'id': '', 'username': '', 'password': '', 'firstnam': 'dffvfv', 'lastname': 'dfdfbdfb', 'totalprice': 552.0, 'depositpaid': 1.0, 'checkin': Timestamp('2018-01-01 00:00:00'), 'checkout': Timestamp('2015-01-01 00:00:00'), 'additionalneeds': 'Breakfast', 'expected': 1.0, 'note': ''}"}], "start": 1753302396481, "stop": 1753302397167, "uuid": "634928c7-bf58-4bb8-8826-27803ed60f72", "historyId": "d7d08e745719b3e19b28c7d536478bfd", "testCaseId": "4f0670a60997e0fc73851b73a58abf12", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "15672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}