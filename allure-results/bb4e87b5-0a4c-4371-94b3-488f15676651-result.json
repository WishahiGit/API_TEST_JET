{"name": "test_get_by_id[Valid-create]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 200/201/204, got 404", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x00000213B7BF5D00>, data = {'action': 'get_by_id', 'additionalneeds': '', 'id': 1.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Fetches a users by ID and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"get_by_id\", parametrize=True))\n    def test_get_by_id(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n    \n        print(\"\\n[GET BY ID] users ID:\", id)\n    \n        res = self.users_api.get_users_by_id(id)\n    \n        print(\"[GET BY ID] Response Code:\", res.status_code)\n        print(\"[GET BY ID] Response Body:\", res.text)\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [404]>, expected = True\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n>           assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\nE           AssertionError: Expected 200/201/204, got 404\n\nutils\\response_validators.py:38: AssertionError"}, "description": "Fetches a users by ID and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "c1830b91-734a-4a91-bee5-39c47a2d9051-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "278f92a8-3216-4b92-9564-2a73efaa27e1-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "2a3c6eb6-0703-48a7-8b3a-598c71925498-attachment.txt", "type": "text/plain"}, {"name": "[GET] request", "source": "f95d5d44-2bbc-4cba-b0d8-d1e2e47ca958-attachment.txt", "type": "text/plain"}, {"name": "response [404]", "source": "8893813a-d485-417c-85dd-984a7afe4142-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'get_by_id', 'id': 1.0, 'username': '', 'password': '', 'firstname': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': True, 'note': 'Valid-create'}"}], "start": 1753308882439, "stop": 1753308883047, "uuid": "451abae4-dcfe-477d-9e35-1d381c89076d", "historyId": "53da6b70de6b5aabd3bb8bf32030e3d8", "testCaseId": "b36400a3d5d493736831dbaf54a70e20", "fullName": "tests.test_api_resource.TestusersAPI#test_get_by_id", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "19568-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}