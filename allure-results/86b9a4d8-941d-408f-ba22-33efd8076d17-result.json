{"name": "test_update_users[NO-Valid-Partial Update]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 403", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000021F6F4F2B10>, data = {'action': 'update_by_id', 'additionalneeds': '', 'id': 0.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n        payload = build_users_payload(data)\n        res = self.users_api.update_users(id, payload=payload)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [403]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n            if res.status_code == 204:\n                return\n            try:\n                data = res.json()\n            except Exception as e:\n                raise AssertionError(f\"Response is not valid JSON: {e}\")\n            assert_common_fields(data)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 403\n\nutils\\response_validators.py:47: AssertionError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "ecf552bc-3aea-413c-b073-a3a63c870883-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "b6fcc8c1-a420-4181-88a0-fb6e083d5927-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "4716b95a-b03c-4767-a606-070c684599f1-attachment.txt", "type": "text/plain"}, {"name": "[PUT] request", "source": "33205c74-0f3f-4f75-9ef6-689b7a69a3ce-attachment.txt", "type": "text/plain"}, {"name": "response [403]", "source": "1e4e0a9c-a6f2-447c-a6a9-02b6420f4151-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 0.0, 'username': '', 'password': '', 'firstnam': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': False, 'note': 'NO-Valid-Partial Update'}"}], "start": 1753305801331, "stop": 1753305801944, "uuid": "fa170507-f555-42c1-b192-84925e2f26fb", "historyId": "349c324df3a3b4076626fa86aef6972c", "testCaseId": "b5cf996acdbf337d70d6630e3e1a8d62", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "14140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}