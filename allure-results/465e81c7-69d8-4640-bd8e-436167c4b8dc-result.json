{"name": "test_get_all_posts[Valid - All posts list]", "status": "broken", "statusDetails": {"message": "KeyError: 'is_borrowed'", "trace": "self = <tests.test_api_users.TestPostsAPI object at 0x000001D2FFDD42B0>, data = {'action': 'get_all_posts', 'body': '', 'expected': True, 'id': '', ...}\n\n    @allure.description(\"Fetches all users and validates their structure.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"get_all_posts\", parametrize=True))\n    def test_get_all_posts(self, data):\n        res = self.posts_api.get_posts()\n        expected = parse_bool(data.get(\"expected\"))\n>       validate_list_response(res, expected, item_name=\"user\")\n\ntests\\test_api_users.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\response_validators.py:55: in validate_list_response\n    assert_common_fields(item)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = {'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam...chitecto', 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'userId': 1}\n\n    def assert_common_fields(data):\n        \"\"\"\n        Validates known fields if they exist.\n        Does NOT require all fields to be present.\n        \"\"\"\n    \n        if \"id\" in data:\n            assert isinstance(data[\"id\"], int), \"'id' must be int\"\n    \n        if \"title\" in data:\n            assert isinstance(data[\"title\"], str), \"'title' must be a string\"\n            assert data[\"title\"].strip() != \"\", \"'title' must not be empty\"\n    \n        if \"author\" in data:\n            assert isinstance(data[\"author\"], str), \"'author' must be a string\"\n            assert data[\"author\"].strip() != \"\", \"'author' must not be empty\"\n    \n        if \"body\" in data:\n>           assert isinstance(data[\"is_borrowed\"], bool), \"'is_borrowed' must be a string\"\nE           KeyError: 'is_borrowed'\n\nutils\\response_validators.py:19: KeyError"}, "description": "Fetches all users and validates their structure.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "368772c4-2f76-4bdd-9144-cddafb07cb6f-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "a0c5c97f-e268-43f0-a043-41b2144af6b8-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "1b806080-7250-4bf2-9953-2b9a06872352-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'get_all_posts', 'id': '', 'body': '', 'id': '', 'title': '', 'expected': True, 'note': 'Valid - All posts list'}"}], "start": 1753213519418, "stop": 1753213520805, "uuid": "891a0402-88a9-49a6-a7f1-9063171d5e96", "historyId": "b981f84db5b4ab44730e09eef96e0aa2", "testCaseId": "e3c3dd903286f585d5c77e550c5c804f", "fullName": "tests.test_api_users.TestPostsAPI#test_get_all_posts", "labels": [{"name": "epic", "value": "posts API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_users"}, {"name": "subSuite", "value": "TestPostsAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "33216-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_users"}]}