{"name": "test_update_users[NoValid- Book not found]", "status": "broken", "statusDetails": {"message": "ValueError: invalid literal for int() with base 10: ''", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000001A906AFC050>, data = {'action': 'update_by_id', 'additionalneeds': '', 'id': 999999.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n>       payload = build_users_payload(data)\n\ntests\\test_api_resource.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'action': 'update_by_id', 'additionalneeds': '', 'id': 999999.0, 'checkin': NaT, ...}\n\n    def build_users_payload(data):\n        \"\"\"\n        Builds a payload dictionary for creating or updating a users.\n        Adjusts fields based on the expected API structure.\n        \"\"\"\n        return {\n            \"firstname\": data.get(\"firstname\", \"\"),\n            \"lastname\": data.get(\"lastname\", \"\"),\n>           \"totalprice\": int(data.get(\"totalprice\", 0)),\n            \"depositpaid\": str(data.get(\"depositpaid\", \"\")).strip().lower() == \"true\",\n            \"usersdates\": {\n                \"checkin\": str(data[\"checkin\"].date()) if not pd.isna(data[\"checkin\"]) else None,\n                \"checkout\": str(data[\"checkout\"].date()) if not pd.isna(data[\"checkout\"]) else None,\n    \n            },\n            \"additionalneeds\": data.get(\"additionalneeds\", \"\")\n        }\nE       ValueError: invalid literal for int() with base 10: ''\n\nutils\\input.py:30: ValueError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "c9b425c6-60bc-4599-9fdc-ce6e39a83c5a-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "8205bc7a-ff46-4e1e-9144-a8057ec5287a-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "e784950c-ec11-4977-a783-0a2355e37685-attachment.txt", "type": "text/plain"}, {"name": "[None] request", "source": "33c29f1a-961a-4d8a-b723-bd982b7d3248-attachment.txt", "type": "text/plain"}, {"name": "Allure Attachment Error", "source": "cc02099d-5361-4ba1-9991-0b9269786d40-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 999999.0, 'username': '', 'password': '', 'firstnam': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': False, 'note': 'NoValid- Book not found'}"}], "start": 1753303227536, "stop": 1753303227537, "uuid": "264c252f-879e-484c-947a-a345de64e575", "historyId": "eef1b024786eeb35515a4e850cfb3584", "testCaseId": "b5cf996acdbf337d70d6630e3e1a8d62", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "1120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}