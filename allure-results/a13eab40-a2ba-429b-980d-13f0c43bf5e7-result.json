{"name": "test_update_users[Valid-Partial Update]", "status": "failed", "statusDetails": {"message": "Failed: [ERROR] Invalid book_id from Excel: 'None'", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000001EAE8B35350>, data = {'action': 'update_by_id', 'author': 'Only Author', 'book_id': '', 'expected': True, ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        try:\n>           book_id = extract_book_id(data, fallback_id=self.__class__.created_ids[0])\n\ntests\\test_api_resource.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'action': 'update_by_id', 'author': 'Only Author', 'book_id': '', 'expected': True, ...}, fallback_id = 3\n\n    def extract_book_id(data, fallback_id):\n        \"\"\"\n        Extracts book_id from input data.\n        If missing or empty, uses fallback_id.\n        \"\"\"\n        raw = data.get(\"book_id\")\n>       return int(float(raw)) if str(raw).strip() else fallback_id\nE       TypeError: float() argument must be a string or a real number, not 'NoneType'\n\nutils\\input.py:16: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_api_resource.TestusersAPI object at 0x000001EAE8B35350>, data = {'action': 'update_by_id', 'author': 'Only Author', 'book_id': '', 'expected': True, ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        try:\n            book_id = extract_book_id(data, fallback_id=self.__class__.created_ids[0])\n        except Exception:\n>           pytest.fail(f\"[ERROR] Invalid book_id from Excel: '{data.get('book_id')}'\")\nE           Failed: [ERROR] Invalid book_id from Excel: 'None'\n\ntests\\test_api_resource.py:47: Failed"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "4bbbc89b-0174-4df7-a4f0-8896f2e71a80-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "449d7d3e-af16-4375-a502-96be1b5d0291-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "af33ffab-04b1-4660-94d2-88735fdc53e4-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'book_id': '', 'author': 'Only Author', 'is_borrowed': '', 'title': 'Updated Title2', 'user': '', 'expected': True, 'note': 'Valid-Partial Update'}"}], "start": 1753272564127, "stop": 1753272564128, "uuid": "9b33251a-1918-48d9-8106-978344c8ccee", "historyId": "a94f59ed388e8ad31514b6f0bae59cad", "testCaseId": "8f30c748a08cbeff2e9210952ed78284", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "16692-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}