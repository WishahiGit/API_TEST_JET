{"name": "test_create_post[Valid - Create new post2]", "status": "failed", "statusDetails": {"message": "AssertionError: 'author' must not be empty", "trace": "self = <tests.test_api_users.TestPostsAPI object at 0x0000017790021450>, data = {'action': 'create', 'body': '', 'expected': True, 'id': 1000.0, ...}\n\n    @allure.description(\"Creates a new user and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_post(self, data):\n        payload = build_post_payload(data)\n        res = self.posts_api.add_posts(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_users.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils\\response_validators.py:36: in validate_response\n    assert_common_fields(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndata = {'author': '', 'id': 101, 'title': 'ASAB'}\n\n    def assert_common_fields(data):\n        \"\"\"\n        Validates known fields if they exist.\n        Does NOT require all fields to be present.\n        \"\"\"\n    \n        if \"id\" in data:\n            assert isinstance(data[\"id\"], int), \"'id' must be int\"\n    \n        if \"title\" in data:\n            assert isinstance(data[\"title\"], str), \"'title' must be a string\"\n            assert data[\"title\"].strip() != \"\", \"'title' must not be empty\"\n    \n        if \"author\" in data:\n            assert isinstance(data[\"author\"], str), \"'author' must be a string\"\n>           assert data[\"author\"].strip() != \"\", \"'author' must not be empty\"\nE           AssertionError: 'author' must not be empty\n\nutils\\response_validators.py:16: AssertionError"}, "description": "Creates a new user and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "d7f98d24-4873-4221-a003-13d3d9b2a4f0-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "1e5ad9ef-4d30-4789-a439-4f0bd67ee110-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "19446f23-45a0-40ac-93bc-758c173b8d49-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'id': 1000.0, 'body': '', 'id': 'bar', 'title': 'ASAB', 'expected': True, 'note': 'Valid - Create new post2'}"}], "start": 1753214140228, "stop": 1753214140719, "uuid": "65b328b9-6da3-4af6-bc19-dab0eaa0183f", "historyId": "e043e3bc4a5bb405e698cdc18590972b", "testCaseId": "01ff3c41091b7f790c97cbfd4ec06a06", "fullName": "tests.test_api_users.TestPostsAPI#test_create_post", "labels": [{"name": "epic", "value": "posts API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_users"}, {"name": "subSuite", "value": "TestPostsAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "31904-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_users"}]}