{"name": "test_create_users[Valid-Create Different user]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 401", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000023C05BBD5B0>, data = {'action': 'create', 'expected': False, 'job': 'dev', 'name': '', ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [401]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201], f\"Expected 200/201, got {res.status_code}\"\n            try:\n                data = res.json()\n            except Exception as e:\n                raise AssertionError(f\"Response is not valid JSON: {e}\")\n            assert_common_fields(data)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 401\n\nutils\\response_validators.py:38: AssertionError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "ed688b18-e7ea-4d09-b671-990bf017d6db-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "026a45c4-67cd-495d-88ee-9d6e1ea34d4c-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "0a52dcba-83d7-4a47-8bb9-dac1470175c3-attachment.txt", "type": "text/plain"}, {"name": "[POST] request", "source": "9f59d3c7-97ab-428c-a274-44bd0222c286-attachment.txt", "type": "text/plain"}, {"name": "response [401]", "source": "f1df1aec-2bc0-41cd-90ec-f8dc6f6a8ee8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'id': '', 'name': '', 'job': 'dev', 'expected': False, 'note': 'Valid-Create Different user'}"}], "start": 1753285522639, "stop": 1753285522929, "uuid": "05293d3f-ac46-4d1e-bde6-fd428376d62a", "historyId": "b4ea75d723aae63d7a339491dc6da9a0", "testCaseId": "773c4b92666421217840b4ff76e73058", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "10540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}