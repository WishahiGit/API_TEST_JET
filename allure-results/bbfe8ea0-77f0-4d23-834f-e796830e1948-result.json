{"name": "test_get_all_users[]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 200", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000022424699950>, data = {'action': 'get_all_users', 'additionalneeds': '', 'id': '', 'checkin': NaT, ...}\n\n    @allure.description(\"Fetches all users and validates their structure.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"get_all_users\", parametrize=True))\n    def test_get_all_users(self, data):\n        res = self.users_api.get_users()\n        expected = parse_bool(data.get(\"expected\"))\n>       validate_list_response(res, expected, item_name=\"users\")\n\ntests\\test_api_resource.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [200]>, expected = False, item_name = 'users'\n\n    def validate_list_response(res, expected, item_name=\"item\"):\n        \"\"\"\n        Validates JSON response for a list of items (e.g., users, books).\n        Checks that each item has the required fields.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201], f\"Expected 200/201, got {res.status_code}\"\n            try:\n                data = res.json()\n            except Exception as e:\n                raise AssertionError(f\"Response is not valid JSON: {e}\")\n            assert isinstance(data, list), f\"Expected list of {item_name}s, got {type(data).__name__}\"\n            for item in data:\n                assert isinstance(item, dict), f\"Each {item_name} must be a dict\"\n                assert_common_fields(item)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 200\n\nutils\\response_validators.py:66: AssertionError"}, "description": "Fetches all users and validates their structure.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "ef9d09d1-021e-48d3-8f15-bfe61f3668e0-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "ada53ea7-904f-49d3-9c3f-253d63623855-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "f6753f06-0911-449e-94ba-251b370e693e-attachment.txt", "type": "text/plain"}, {"name": "[GET] request", "source": "87640023-497d-4b05-9c5e-534280b5c534-attachment.txt", "type": "text/plain"}, {"name": "response [200]", "source": "aee0b23d-7aa2-4c46-9fbe-844b0dbf1f70-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'get_all_users', 'id': '', 'username': '', 'password': '', 'firstnam': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': '', 'note': ''}"}], "start": 1753302195138, "stop": 1753302195882, "uuid": "b5047fcf-6d15-451f-ac7f-d76c95805378", "historyId": "e28c8294178ac97ec6301d49e055074c", "testCaseId": "15fa6715d8d435e7146226d684f7f5aa", "fullName": "tests.test_api_resource.TestusersAPI#test_get_all_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "15672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}