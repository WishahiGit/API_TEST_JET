{"name": "test_delete_users[NoValid-Delete Invalid ID]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404/405, got 403", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000022DD656D050>, data = {'action': 'delete_by_id', 'additionalneeds': '', 'id': 0.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Deletes a users by ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"delete_by_id\", parametrize=True))\n    def test_delete_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        raw_id = data.get(\"id\")\n        if raw_id is not None and str(raw_id).strip() != \"\":\n            id = int(float(raw_id))  # ◊™◊ï◊û◊ö ◊í◊ù ◊ë÷æ0.0\n        else:\n            id = self.__class__.created_ids.pop(0)\n    \n        print(\"\\n[DELETE] users ID:\", id)\n    \n        res = self.users_api.delete_users(id)\n    \n        print(\"[DELETE] Response Code:\", res.status_code)\n        print(\"[DELETE] Response Body:\", res.text)\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [403]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n            if res.status_code == 204:\n                return\n            if 'application/json' in res.headers.get('Content-Type', ''):\n                try:\n                    data = res.json()\n                    assert_common_fields(data)\n                except Exception as e:\n                    raise AssertionError(f\"Response is not valid JSON: {e}\")\n            else:\n                print(f\"Non-JSON response body: {res.text}\")\n        else:\n>           assert res.status_code in [400, 404, 405], f\"Expected 400/404/405, got {res.status_code}\"\nE           AssertionError: Expected 400/404/405, got 403\n\nutils\\response_validators.py:50: AssertionError"}, "description": "Deletes a users by ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "5124a317-3320-4f3e-86b7-85c2f0a72209-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "d4900237-89fc-456e-8403-1b52769e3c7d-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "c4b8ab9a-1e10-455b-ae84-df6dfaf47f0b-attachment.txt", "type": "text/plain"}, {"name": "[DELETE] request", "source": "5799e201-7067-4ad5-a658-3bd5333e4968-attachment.txt", "type": "text/plain"}, {"name": "response [403]", "source": "1fc02b6e-0030-4a78-90e5-8e065aa2dc0d-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'delete_by_id', 'id': 0.0, 'username': '', 'password': '', 'firstname': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': False, 'note': 'NoValid-Delete Invalid ID'}"}], "start": 1753308649456, "stop": 1753308650024, "uuid": "85c24027-233c-4d3b-9621-bc9d6c7db6ec", "historyId": "0ae7b476c286e11cf7c16115c27cb37b", "testCaseId": "c63c59542b9fcf261cf624e91c5040a5", "fullName": "tests.test_api_resource.TestusersAPI#test_delete_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "10308-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}