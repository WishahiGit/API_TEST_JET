{"name": "test_update_users[NO-Valid-Partial Update]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 200", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000002702EA29AE0>, data = {'action': 'update_by_id', 'expected': False, 'job': '', 'name': 'Only Author', ...}\n\n    @allure.description(\"Updates users details by users ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"update_by_id\", parametrize=True))\n    def test_update_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        try:\n            id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n        except Exception:\n            pytest.fail(f\"[ERROR] Invalid id from Excel: '{data.get('id')}'\")\n    \n        payload = build_users_payload(data)\n        res = self.users_api.update_users(id, payload=payload)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [200]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201, 204], f\"Expected 200/201/204, got {res.status_code}\"\n    \n            if res.status_code == 204:\n                # No Content ‚Äì skip validation\n                return\n    \n            data = parse_json_response(res)\n            assert_common_fields(data)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 200\n\nutils\\response_validators.py:44: AssertionError"}, "description": "Updates users details by users ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "09f9a344-7733-4667-b39b-df1ec55e49de-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "bdf8cd80-212e-4f97-bf2b-8cfd242e109f-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "df4ea1e9-92f6-400d-bafe-fa6b7f375745-attachment.txt", "type": "text/plain"}, {"name": "[PUT] request", "source": "62c7a34f-7318-435b-90d1-a615178c728c-attachment.txt", "type": "text/plain"}, {"name": "response [200]", "source": "d5d5fae3-d6c8-4412-bd6d-719870da46d6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'update_by_id', 'id': 999999999.0, 'name': 'Only Author', 'job': '', 'expected': False, 'note': 'NO-Valid-Partial Update'}"}], "start": 1753287562799, "stop": 1753287563084, "uuid": "a036359f-92b5-45f7-aefe-dc038057b31f", "historyId": "4705b3c1fb472b0a88e28c9a2b994b2b", "testCaseId": "606f5d6c173cdf14acb8881bab7fb526", "fullName": "tests.test_api_resource.TestusersAPI#test_update_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "10852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}