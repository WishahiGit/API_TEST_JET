{"name": "test_get_by_id[Valid-create]", "status": "broken", "statusDetails": {"message": "TypeError: float() argument must be a string or a real number, not 'NoneType'", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000001CE47EC1D00>, data = {'action': 'get_by_id', 'additionalneeds': '', 'id': 1.0, 'checkin': NaT, ...}\n\n    @allure.description(\"Fetches a users by ID and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"get_by_id\", parametrize=True))\n    def test_get_by_id(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n>       id = extract_id(data, fallback_id=self.__class__.created_ids[0])\n\ntests\\test_api_resource.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'action': 'get_by_id', 'additionalneeds': '', 'id': 1.0, 'checkin': NaT, ...}, fallback_id = 4029\n\n    def extract_id(data, fallback_id):\n        \"\"\"\n        Extracts id from input data.\n        If missing or invalid, uses fallback_id.\n        \"\"\"\n        raw = data.get(\"id\")\n>       return int(float(raw)) if str(raw).strip() else fallback_id\nE       TypeError: float() argument must be a string or a real number, not 'NoneType'\n\nutils\\input.py:19: TypeError"}, "description": "Fetches a users by ID and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "2f53fe62-aaf6-4962-9c2d-bc81c00e6a66-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "5793b8d8-f3f2-4f9d-84a1-a391b471eae8-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "abd2cfed-21fe-4a84-97af-dc2a9cc499b3-attachment.txt", "type": "text/plain"}, {"name": "[None] request", "source": "bbe54521-a693-47b7-b384-8aea85346f51-attachment.txt", "type": "text/plain"}, {"name": "Allure Attachment Error", "source": "2589630b-9103-43a4-9c27-df4c3b2634bc-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'get_by_id', 'id': 1.0, 'username': '', 'password': '', 'firstnam': '', 'lastname': '', 'totalprice': '', 'depositpaid': '', 'checkin': NaT, 'checkout': NaT, 'additionalneeds': '', 'expected': True, 'note': 'Valid-create'}"}], "start": 1753303716015, "stop": 1753303716017, "uuid": "e4f6c1ad-e7cd-4c08-bf9c-418c9a437b7d", "historyId": "6cb4e6082eb5ff5a1e8d5ab39b2acaa9", "testCaseId": "b36400a3d5d493736831dbaf54a70e20", "fullName": "tests.test_api_resource.TestusersAPI#test_get_by_id", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "13484-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}