{"name": "test_create_users[Valid - Create new post]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 200/201, got 404", "trace": "self = <tests.test_api_users.TestusersAPI object at 0x000002AD6C9E3B10>, data = {'action': 'create', 'body': 'foo', 'expected': True, 'id': 1.0, ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.add_users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_users.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [404]>, expected = True, required_fields = None\n\n    def validate_response(res, expected, required_fields=None):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        You can supply required_fields for field validation.\n        \"\"\"\n        if expected:\n>           assert res.status_code in [200, 201], f\"Expected 200/201, got {res.status_code}\"\nE           AssertionError: Expected 200/201, got 404\n\nutils\\response_validators.py:29: AssertionError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "e366032b-694c-48ce-b656-3dc0725cad30-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "95bd2379-91d1-451d-94de-803feacb8914-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "6b7af808-1d82-40c1-9940-61421a71dd93-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'id': 1.0, 'body': 'foo', 'id': 'bar', 'title': 'WAO', 'expected': True, 'note': 'Valid - Create new post'}"}], "start": 1753267029889, "stop": 1753267031930, "uuid": "7dd06f27-c0d6-44c9-9af4-ee4fff04027c", "historyId": "7920236a3a6e824edb9476108a1b48d7", "testCaseId": "0dc3d320762c9311ae6b6cc25b1f843e", "fullName": "tests.test_api_users.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_users"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "17116-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_users"}]}