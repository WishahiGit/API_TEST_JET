{"name": "test_create_users[]", "status": "broken", "statusDetails": {"message": "TypeError: Object of type Timestamp is not JSON serializable", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x000002DE3A147890>, data = {'action': 'create_users', 'additionalneeds': 'Breakfast', 'id': '', 'checkin': Timestamp('2018-01-01 00:00:00'), ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create_users\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n>       res = self.users_api.users(payload=payload)\n\ntests\\test_api_resource.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napis\\resource_api.py:22: in users\n    return self.post(url, headers=headers, payload=payload)\napis\\BaseRequest.py:30: in post\n    res = requests.post(url, headers=headers, json=payload)\nC:\\full-Playwright\\.venv\\Lib\\site-packages\\requests\\api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\nC:\\full-Playwright\\.venv\\Lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\nC:\\full-Playwright\\.venv\\Lib\\site-packages\\requests\\sessions.py:575: in request\n    prep = self.prepare_request(req)\nC:\\full-Playwright\\.venv\\Lib\\site-packages\\requests\\sessions.py:484: in prepare_request\n    p.prepare(\nC:\\full-Playwright\\.venv\\Lib\\site-packages\\requests\\models.py:370: in prepare\n    self.prepare_body(data, files, json)\nC:\\full-Playwright\\.venv\\Lib\\site-packages\\requests\\models.py:510: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\nC:\\Users\\win 11\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\__init__.py:238: in dumps\n    **kw).encode(obj)\nC:\\Users\\win 11\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\nC:\\Users\\win 11\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\encoder.py:261: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000002DE3A146490>, o = Timestamp('2018-01-01 00:00:00')\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return super().default(o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type Timestamp is not JSON serializable\n\nC:\\Users\\win 11\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\json\\encoder.py:180: TypeError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "ac3255ee-f3b0-4852-a5a2-39712d8dadda-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "81d299d7-b661-4a45-ab4d-fe7fdfccf55b-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "1fe862b5-c77a-40f8-b162-c9a9325347fd-attachment.txt", "type": "text/plain"}, {"name": "[POST] request", "source": "b07e7ced-be90-431f-a5eb-bc0e995d8690-attachment.txt", "type": "text/plain"}, {"name": "Allure Attachment Error", "source": "4d4e9ec7-a225-42c5-869c-00b04a392fad-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create_users', 'id': '', 'username': '', 'password': '', 'firstnam': 'dffvfv', 'lastname': 'dfdfbdfb', 'totalprice': 552.0, 'depositpaid': 1.0, 'checkin': Timestamp('2018-01-01 00:00:00'), 'checkout': Timestamp('2015-01-01 00:00:00'), 'additionalneeds': 'Breakfast', 'expected': 1.0, 'note': ''}"}], "start": 1753302216436, "stop": 1753302216459, "uuid": "4995c6ea-a013-488c-8012-cbc7d32ae0aa", "historyId": "d7d08e745719b3e19b28c7d536478bfd", "testCaseId": "4f0670a60997e0fc73851b73a58abf12", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "15092-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}