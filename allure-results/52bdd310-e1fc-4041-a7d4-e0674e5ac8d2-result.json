{"name": "test_delete_users[NoValid-Delete Invalid ID]", "status": "failed", "statusDetails": {"message": "AssertionError: Expected 400/404, got 401", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x0000023C05B2D8B0>, data = {'action': 'delete_by_id', 'expected': False, 'job': '', 'name': '', ...}\n\n    @allure.description(\"Deletes a users by ID.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"delete_by_id\", parametrize=True))\n    def test_delete_users(self, data):\n        expected = parse_bool(data.get(\"expected\"))\n        raw_id = data.get(\"id\")\n        id = int(raw_id) if raw_id else self.__class__.created_ids.pop(0)\n        res = self.users_api.delete_users(id)\n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nres = <Response [401]>, expected = False\n\n    def validate_response(res, expected):\n        \"\"\"\n        Validates the HTTP response status and JSON fields for single-object responses.\n        \"\"\"\n        if expected:\n            assert res.status_code in [200, 201], f\"Expected 200/201, got {res.status_code}\"\n            try:\n                data = res.json()\n            except Exception as e:\n                raise AssertionError(f\"Response is not valid JSON: {e}\")\n            assert_common_fields(data)\n        else:\n>           assert res.status_code in [400, 404], f\"Expected 400/404, got {res.status_code}\"\nE           AssertionError: Expected 400/404, got 401\n\nutils\\response_validators.py:38: AssertionError"}, "description": "Deletes a users by ID.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "878f61b8-f757-494a-a552-e8d3564f34b1-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "3648127c-89c1-42e7-b1ca-dee5b869b00c-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "da15473d-e414-4cd9-8227-a8ebdffe89b2-attachment.txt", "type": "text/plain"}, {"name": "[DELETE] request", "source": "51de2e3f-baf9-4e70-bb1c-094cf742a3c0-attachment.txt", "type": "text/plain"}, {"name": "response [401]", "source": "c711858b-6fc9-4e35-95f9-d9efc9c3dada-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'delete_by_id', 'id': -1.0, 'name': '', 'job': '', 'expected': False, 'note': 'NoValid-Delete Invalid ID'}"}], "start": 1753285523259, "stop": 1753285523544, "uuid": "0de5b406-60d0-4f90-bc33-4dcb76298b10", "historyId": "064f538f9931266e68251d176900aef7", "testCaseId": "ffa5fb6b1ccd28f13d6d59b7a1894c7f", "fullName": "tests.test_api_resource.TestusersAPI#test_delete_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "10540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}