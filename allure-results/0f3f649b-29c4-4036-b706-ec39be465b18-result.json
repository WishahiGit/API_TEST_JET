{"name": "test_create_users[Valid-Create Different user]", "status": "failed", "statusDetails": {"message": "AssertionError: 'name' must be a non-empty string", "trace": "self = <tests.test_api_resource.TestusersAPI object at 0x00000274FFCB15B0>, data = {'action': 'create', 'expected': True, 'job': 'dev', 'name': '', ...}\n\n    @allure.description(\"Creates a new users and validates the response.\")\n    @pytest.mark.parametrize(*load_test_data(\"apis\", \"create\", parametrize=True))\n    def test_create_users(self, data):\n        payload = build_users_payload(data)\n        res = self.users_api.users(payload=payload)\n        expected = parse_bool(data.get(\"expected\"))\n    \n>       validate_response(res, expected)\n\ntests\\test_api_resource.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\response_validators.py:31: in validate_response\n    assert_common_fields(data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = {'createdAt': '2025-07-23T16:00:05.198Z', 'id': '657', 'job': 'dev', 'name': ''}\n\n    def assert_common_fields(data):\n        \"\"\"\n        Validates common expected field types and non-empty constraints dynamically.\n        Extend this mapping as needed for different APIs.\n        \"\"\"\n    \n        field_validations = {\n            \"id\": (lambda v: isinstance(v, (int, str)), \"'id' must be int or str\"),\n            \"name\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'name' must be a non-empty string\"),\n            \"job\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'job' must be a non-empty string\"),\n            \"email\": (lambda v: isinstance(v, str) and \"@\" in v, \"'email' must be a valid email string\"),\n            \"first_name\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'first_name' must be a non-empty string\"),\n            \"last_name\": (lambda v: isinstance(v, str) and v.strip() != \"\", \"'last_name' must be a non-empty string\"),\n        }\n    \n        for field, (validator, error_msg) in field_validations.items():\n            if field in data:\n>               assert validator(data[field]), error_msg\nE               AssertionError: 'name' must be a non-empty string\n\nutils\\response_validators.py:18: AssertionError"}, "description": "Creates a new users and validates the response.", "attachments": [{"name": "‚è∞ Test Start Time", "source": "c63d8144-ef55-410c-8680-f666cd4f68ca-attachment.txt", "type": "text/plain"}, {"name": "üèÅ Test End Time", "source": "d609cf5d-e8c7-49ce-924e-bae772077a91-attachment.txt", "type": "text/plain"}, {"name": "‚è±Ô∏è Test Duration", "source": "01291fd5-e17f-45b3-b462-f59e014f2a30-attachment.txt", "type": "text/plain"}, {"name": "[POST] request", "source": "6112eaec-61f1-4920-be0a-36049021efdb-attachment.txt", "type": "text/plain"}, {"name": "response [201]", "source": "e319a1fb-c67c-43b0-b67f-491f904ec2d5-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'action': 'create', 'id': '', 'name': '', 'job': 'dev', 'expected': True, 'note': 'Valid-Create Different user'}"}], "start": 1753286403524, "stop": 1753286403813, "uuid": "3901f63d-3c36-40a2-a8d9-5b5f281d0af1", "historyId": "76c258f7d677ce3e9435c92c0fef7871", "testCaseId": "773c4b92666421217840b4ff76e73058", "fullName": "tests.test_api_resource.TestusersAPI#test_create_users", "labels": [{"name": "epic", "value": "users API"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "tag", "value": "api"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_api_resource"}, {"name": "subSuite", "value": "TestusersAPI"}, {"name": "host", "value": "Saber"}, {"name": "thread", "value": "4864-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_api_resource"}]}